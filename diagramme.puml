@startuml dd

class BestioleFactory {

  + CreerBestiole(x_lim , y_lim):Bestiole
  +double VITESSE_MAX 
  +double AGE_MAX 
  +double VITESSE_MAX
  +double TAILLE 
  +int RESISTANCE_MAX 
  +int REDUCTION_RESISTANCE

}

class Bestiole {
  - static const double AFF_SIZE
  - static const double MAX_VITESSE
  - static const double LIMITE_VUE
  - int id
  - double vitesse
  - double position_x
  - double position_y
  - double orientation
  - double taille
  - int age
  - int age_limite
  - bool estVivant
  - double resistance
  - double detectabilite
  - bool yeux
  - bool oreille
  - bool nageoire
  - bool carapace
  - bool camouflage
  - std::vector<Capteur*> Capteurs
  - double cumulX
  - double cumulY
  - T* couleur
  - IComportement* icomportement

  + void viellir()
  + Bestiole* clonage()
  + void Bouge(larg_max,longueur_max)
  + void Percussion(Bestiole)
  + void executeComportement(Milieu)
  + std::vector<bool> Detection(Milieu)
  + void action(Milieu)
  + void draw(UImg)

}

class Milieu {
 - int longueur
 - int largeur

 +AjouterBestiole(Bestiole)
 +eliminerBestiole(Bestiole)
 +Step(Factory , vecteurs_bestioles)
 +Update()
 +percussionBestiole()
 +Detection(Milieu)
}



class Aquarium {
    - int delay 
    - Milieu flotte

    + genererFichierMetriques(vecteur_bestioles_initiales)
    + run(Factory, vecteur_bestioles_initiales)
}




class BestioleOreille {
    - Bestiole owner 
    - float delta 
    - float gamme 
    + detecter(Millieu) 

}

Interface Accessoire {
  setParam() : void
}

Interface Capteur {
  detecter(Millieu) : vector<Bool>
}


class BestioleNageoire {
  - double boost
  - Bestiole& Owner

  + BestioleNageoire(Bestiole)
  + void setParam()
}

class BestioleCamouflage {
  - Bestiole Owner
  - double phi

  + BestioleCamouflage(Bestiole)
  + void setParam()
}

class BestioleCarapace {
  - Bestiole& Owner
  - double eta
  - double omega

  + BestioleCarapace(Bestiole)
  + void setParam()
}


class BestioleYeux {
  - const Bestiole& owner
  - double alpha
  - double delta
  - double gamma

  + BestioleYeux(Bestiole)
  + std::vector<bool> detecter(Milieu)
}

interface IComportement {
  + Déplacer(Bestiole, Milieu)
}

class Grégaire {
    -Déplacer(Bestiole , Milieu) 

}

class Peureuse{
    -Déplacer(Bestiole , Milieu) 

}

class Kamikaze{
    -Déplacer(Bestiole , Milieu) 
}

class Prévoyant{
    -Déplacer(Bestiole , Milieu) 

}


class Multi{
    -Deplacer(Bestiole , Milieu) 
    
}

BestioleFactory --> Bestiole : créer

Capteur *-- Bestiole
Capteur<|..BestioleOreille
Capteur<|..BestioleYeux

IComportement <|.. Grégaire
IComportement <|.. Peureuse
IComportement <|.. Kamikaze
IComportement <|.. Prévoyant
IComportement <|.. Multi
Bestiole *-- IComportement



Accessoire <|..BestioleNageoire
Accessoire <|..BestioleCarapace
Accessoire <|..BestioleCamouflage
Accessoire *-- Bestiole


Milieu --* "many" Bestiole : contient

Milieu -- BestioleFactory

Aquarium -- Milieu

@enduml
